{
  "contractName": "StableTokenFaucet",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "previousGiveaway",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lastGiveaway",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "drip",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "getRecipient",
      "outputs": [
        {
          "components": [
            {
              "name": "receiver",
              "type": "address"
            },
            {
              "name": "nextGiveawayBlock",
              "type": "uint256"
            }
          ],
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.2+commit.1df8f40c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getRecipient\",\"outputs\":[{\"components\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"nextGiveawayBlock\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousGiveaway\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastGiveaway\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drip\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"burn(uint256)\":{\"details\":\"Burns a specific amount of tokens.\",\"params\":{\"value\":\"The amount of token to be burned.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Burns a specific amount of tokens from the target address and decrements allowance\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"value\":\"uint256 The amount of token to be burned\"}},\"decimals()\":{\"return\":\"the number of decimals of the token.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"value\":\"The amount of tokens to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"name()\":{\"return\":\"the name of the token.\"},\"symbol()\":{\"return\":\"the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/vagrant/DAPPS/smartpiggiesGithub/smartpiggies/contracts/StableTokenFaucet.sol\":\"StableTokenFaucet\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"/home/vagrant/DAPPS/smartpiggiesGithub/smartpiggies/contracts/StableTokenFaucet.sol\":{\"keccak256\":\"0x26a1392877bdee159d81e26d9788b73ffa169d358627fa30c835f456cc959b36\",\"urls\":[\"bzzr://3da44d3c30c14119d9dd034e2783202f3859cf9849a056ed8b7d389262a6d2e2\"]},\"openzeppelin-solidity/contracts/access/Roles.sol\":{\"keccak256\":\"0x659ba0f9a3392cd50a8a5fafaf5dfd8c6a0878f6a4613bceff4e90dceddcd865\",\"urls\":[\"bzzr://f704341d520fbc98716541f1b3f67737f0ee6e94adf072a66acb2bd25d593c2b\"]},\"openzeppelin-solidity/contracts/access/roles/MinterRole.sol\":{\"keccak256\":\"0x3199053db04cdae6c9b4380921a4a4ee720b568d6a9660883b29d25fbec31bc0\",\"urls\":[\"bzzr://d06d25f7b57bff1dcb88c5aa476f4037179e6f364b18a89935c11945a857fb18\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xba431353cb4fe70777ac026231eb5468e41aa1e81240a2b8136917acc5fff4dc\",\"urls\":[\"bzzr://80cd02a56e6e33504318124d0d645c82e615cc8a4b5829cc9d82d17635c644c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\":{\"keccak256\":\"0xa3e68fd7f987c8fbdaf4867d428a69a15f3cf2f69709a5b0a0fbef750b0e6fbc\",\"urls\":[\"bzzr://f4ebb7c5b9e429b98b07e2caca6156c13c3724e9b1191cca8423ab8427bc6265\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\":{\"keccak256\":\"0xe195405e9993d575173cdb5dd408db7459a026b9a98085c1a3b676f020f46584\",\"urls\":[\"bzzr://4463a0d4f49767f59c02f2a987b90d48e0d31b3ed3424f3e743496f102f96044\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\":{\"keccak256\":\"0xc4ca2883e0b0743604143952024c250bb13737ad54bb666b117efdcb766fe3a8\",\"urls\":[\"bzzr://6a7d33fd3907230f8af9f865fc802ab3099a1e4c10ad4efca35edadc96efcd3d\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252601181527f537461626c65546f6b656e46617563657400000000000000000000000000000060208083019182528351808501909452600684527f5354464345540000000000000000000000000000000000000000000000000000908401528151919291601291620000909160039190620001cf565b508151620000a6906004906020850190620001cf565b506005805460ff191660ff9290921691909117905550620000d2905033640100000000620000ea810204565b60078054600160a060020a0319163317905562000274565b6200010560068264010000000062000bc26200013c82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a03811615156200015257600080fd5b62000167828264010000000062000197810204565b156200017257600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a0382161515620001af57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021257805160ff191683800117855562000242565b8280016001018555821562000242579182015b828111156200024257825182559160200191906001019062000225565b506200025092915062000254565b5090565b6200027191905b808211156200025057600081556001016200025b565b90565b610eee80620002846000396000f3fe608060405234801561001057600080fd5b506004361061017f576000357c01000000000000000000000000000000000000000000000000000000009004806379cc6790116100e557806398650275116100a9578063a9059cbb11610083578063a9059cbb146102d6578063aa271e1a146102e9578063dd62ed3e146102fc5761017f565b806398650275146102b35780639f678cca146102bb578063a457c2d7146102c35761017f565b806379cc679014610275578063801ccd971461028857806383dff6a01461029057806395d89b4114610298578063983b2d56146102a05761017f565b8063395093511161014757806342966c681161012157806342966c681461022f57806362812a391461024257806370a08231146102625761017f565b806339509351146101ff57806340c10f191461021257806341c0e1b5146102255761017f565b806306fdde0314610184578063095ea7b3146101a257806318160ddd146101c257806323b872dd146101d7578063313ce567146101ea575b600080fd5b61018c61030f565b6040516101999190610e1d565b60405180910390f35b6101b56101b0366004610d38565b6103a6565b6040516101999190610e0f565b6101ca610429565b6040516101999190610e3c565b6101b56101e5366004610ceb565b61042f565b6101f26104fb565b6040516101999190610e4a565b6101b561020d366004610d38565b610504565b6101b5610220366004610d38565b6105a7565b61022d6105d0565b005b61022d61023d366004610d68565b6105f5565b610255610250366004610c8b565b610602565b6040516101999190610e2e565b6101ca610270366004610c8b565b610647565b61022d610283366004610d38565b610662565b6101ca610670565b6101ca610676565b61018c61067c565b61022d6102ae366004610c8b565b6106dd565b61022d6106fa565b6101b5610705565b6101b56102d1366004610d38565b61075d565b6101b56102e4366004610d38565b6107a8565b6101b56102f7366004610c8b565b6107b5565b6101ca61030a366004610cb1565b6107c8565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b505050505090505b90565b6000600160a060020a03831615156103bd57600080fd5b336000818152600160209081526040808320600160a060020a03881680855292529182902085905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610417908690610e3c565b60405180910390a35060015b92915050565b60025490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610463908363ffffffff6107f316565b600160a060020a0385166000908152600160209081526040808320338452909152902055610492848484610808565b600160a060020a0384166000818152600160209081526040808320338085529252918290205491519092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916104e99190610e3c565b60405180910390a35060019392505050565b60055460ff1690565b6000600160a060020a038316151561051b57600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461054f908363ffffffff6108da16565b336000818152600160209081526040808320600160a060020a038916808552925291829020849055905190927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916104179190610e3c565b60006105b2336107b5565b15156105bd57600080fd5b6105c783836108f3565b50600192915050565b600754600160a060020a031633146105e757600080fd5b600754600160a060020a0316ff5b6105ff33826109a2565b50565b61060a610c5c565b50600160a060020a039081166000908152600a60209081526040918290208251808401909352805490931682526001909201549181019190915290565b600160a060020a031660009081526020819052604090205490565b61066c8282610a42565b5050565b60085481565b60095481565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561039b5780601f106103705761010080835404028352916020019161039b565b6106e6336107b5565b15156106f157600080fd5b6105ff81610afb565b61070333610b43565b565b600033151561071357600080fd5b336000908152600a6020526040902060010154431161073157600080fd5b336000818152600a60205260409020601443016001909101556103a39068056bc75e2d631000006108f3565b6000600160a060020a038316151561077457600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461054f908363ffffffff6107f316565b60006105c7338484610808565b600061042360068363ffffffff610b8b16565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60008282111561080257600080fd5b50900390565b600160a060020a038216151561081d57600080fd5b600160a060020a038316600090815260208190526040902054610846908263ffffffff6107f316565b600160a060020a03808516600090815260208190526040808220939093559084168152205461087b908263ffffffff6108da16565b600160a060020a0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108cd908590610e3c565b60405180910390a3505050565b6000828201838110156108ec57600080fd5b9392505050565b600160a060020a038216151561090857600080fd5b60025461091b908263ffffffff6108da16565b600255600160a060020a038216600090815260208190526040902054610947908263ffffffff6108da16565b600160a060020a0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610996908590610e3c565b60405180910390a35050565b600160a060020a03821615156109b757600080fd5b6002546109ca908263ffffffff6107f316565b600255600160a060020a0382166000908152602081905260409020546109f6908263ffffffff6107f316565b600160a060020a0383166000818152602081905260408082209390935591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610996908590610e3c565b600160a060020a0382166000908152600160209081526040808320338452909152902054610a76908263ffffffff6107f316565b600160a060020a0383166000908152600160209081526040808320338452909152902055610aa482826109a2565b600160a060020a0382166000818152600160209081526040808320338085529252918290205491519092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916109969190610e3c565b610b0c60068263ffffffff610bc216565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610b5460068263ffffffff610c1016565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382161515610ba257600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a0381161515610bd757600080fd5b610be18282610b8b565b15610beb57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515610c2557600080fd5b610c2f8282610b8b565b1515610c3a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b604080518082019091526000808252602082015290565b60006108ec8235610e5c565b60006108ec82356103a3565b600060208284031215610c9d57600080fd5b6000610ca98484610c73565b949350505050565b60008060408385031215610cc457600080fd5b6000610cd08585610c73565b9250506020610ce185828601610c73565b9150509250929050565b600080600060608486031215610d0057600080fd5b6000610d0c8686610c73565b9350506020610d1d86828701610c73565b9250506040610d2e86828701610c7f565b9150509250925092565b60008060408385031215610d4b57600080fd5b6000610d578585610c73565b9250506020610ce185828601610c7f565b600060208284031215610d7a57600080fd5b6000610ca98484610c7f565b610d8f81610e5c565b82525050565b610d8f81610e67565b6000610da982610e58565b808452610dbd816020860160208601610e7e565b610dc681610eaa565b9093016020019392505050565b80516040830190610de48482610d86565b506020820151610df76020850182610dfd565b50505050565b610d8f816103a3565b610d8f81610e78565b602081016104238284610d95565b602080825281016108ec8184610d9e565b604081016104238284610dd3565b602081016104238284610dfd565b602081016104238284610e06565b5190565b600061042382610e6c565b151590565b600160a060020a031690565b60ff1690565b60005b83811015610e99578181015183820152602001610e81565b83811115610df75750506000910152565b601f01601f19169056fea265627a7a7230582081b1d392e31274428b868a5068f144163276393de3a1e1439164c73fa68d24c66c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061017f576000357c01000000000000000000000000000000000000000000000000000000009004806379cc6790116100e557806398650275116100a9578063a9059cbb11610083578063a9059cbb146102d6578063aa271e1a146102e9578063dd62ed3e146102fc5761017f565b806398650275146102b35780639f678cca146102bb578063a457c2d7146102c35761017f565b806379cc679014610275578063801ccd971461028857806383dff6a01461029057806395d89b4114610298578063983b2d56146102a05761017f565b8063395093511161014757806342966c681161012157806342966c681461022f57806362812a391461024257806370a08231146102625761017f565b806339509351146101ff57806340c10f191461021257806341c0e1b5146102255761017f565b806306fdde0314610184578063095ea7b3146101a257806318160ddd146101c257806323b872dd146101d7578063313ce567146101ea575b600080fd5b61018c61030f565b6040516101999190610e1d565b60405180910390f35b6101b56101b0366004610d38565b6103a6565b6040516101999190610e0f565b6101ca610429565b6040516101999190610e3c565b6101b56101e5366004610ceb565b61042f565b6101f26104fb565b6040516101999190610e4a565b6101b561020d366004610d38565b610504565b6101b5610220366004610d38565b6105a7565b61022d6105d0565b005b61022d61023d366004610d68565b6105f5565b610255610250366004610c8b565b610602565b6040516101999190610e2e565b6101ca610270366004610c8b565b610647565b61022d610283366004610d38565b610662565b6101ca610670565b6101ca610676565b61018c61067c565b61022d6102ae366004610c8b565b6106dd565b61022d6106fa565b6101b5610705565b6101b56102d1366004610d38565b61075d565b6101b56102e4366004610d38565b6107a8565b6101b56102f7366004610c8b565b6107b5565b6101ca61030a366004610cb1565b6107c8565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b505050505090505b90565b6000600160a060020a03831615156103bd57600080fd5b336000818152600160209081526040808320600160a060020a03881680855292529182902085905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610417908690610e3c565b60405180910390a35060015b92915050565b60025490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610463908363ffffffff6107f316565b600160a060020a0385166000908152600160209081526040808320338452909152902055610492848484610808565b600160a060020a0384166000818152600160209081526040808320338085529252918290205491519092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916104e99190610e3c565b60405180910390a35060019392505050565b60055460ff1690565b6000600160a060020a038316151561051b57600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461054f908363ffffffff6108da16565b336000818152600160209081526040808320600160a060020a038916808552925291829020849055905190927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916104179190610e3c565b60006105b2336107b5565b15156105bd57600080fd5b6105c783836108f3565b50600192915050565b600754600160a060020a031633146105e757600080fd5b600754600160a060020a0316ff5b6105ff33826109a2565b50565b61060a610c5c565b50600160a060020a039081166000908152600a60209081526040918290208251808401909352805490931682526001909201549181019190915290565b600160a060020a031660009081526020819052604090205490565b61066c8282610a42565b5050565b60085481565b60095481565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561039b5780601f106103705761010080835404028352916020019161039b565b6106e6336107b5565b15156106f157600080fd5b6105ff81610afb565b61070333610b43565b565b600033151561071357600080fd5b336000908152600a6020526040902060010154431161073157600080fd5b336000818152600a60205260409020601443016001909101556103a39068056bc75e2d631000006108f3565b6000600160a060020a038316151561077457600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461054f908363ffffffff6107f316565b60006105c7338484610808565b600061042360068363ffffffff610b8b16565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60008282111561080257600080fd5b50900390565b600160a060020a038216151561081d57600080fd5b600160a060020a038316600090815260208190526040902054610846908263ffffffff6107f316565b600160a060020a03808516600090815260208190526040808220939093559084168152205461087b908263ffffffff6108da16565b600160a060020a0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108cd908590610e3c565b60405180910390a3505050565b6000828201838110156108ec57600080fd5b9392505050565b600160a060020a038216151561090857600080fd5b60025461091b908263ffffffff6108da16565b600255600160a060020a038216600090815260208190526040902054610947908263ffffffff6108da16565b600160a060020a0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610996908590610e3c565b60405180910390a35050565b600160a060020a03821615156109b757600080fd5b6002546109ca908263ffffffff6107f316565b600255600160a060020a0382166000908152602081905260409020546109f6908263ffffffff6107f316565b600160a060020a0383166000818152602081905260408082209390935591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610996908590610e3c565b600160a060020a0382166000908152600160209081526040808320338452909152902054610a76908263ffffffff6107f316565b600160a060020a0383166000908152600160209081526040808320338452909152902055610aa482826109a2565b600160a060020a0382166000818152600160209081526040808320338085529252918290205491519092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916109969190610e3c565b610b0c60068263ffffffff610bc216565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610b5460068263ffffffff610c1016565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382161515610ba257600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a0381161515610bd757600080fd5b610be18282610b8b565b15610beb57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515610c2557600080fd5b610c2f8282610b8b565b1515610c3a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b604080518082019091526000808252602082015290565b60006108ec8235610e5c565b60006108ec82356103a3565b600060208284031215610c9d57600080fd5b6000610ca98484610c73565b949350505050565b60008060408385031215610cc457600080fd5b6000610cd08585610c73565b9250506020610ce185828601610c73565b9150509250929050565b600080600060608486031215610d0057600080fd5b6000610d0c8686610c73565b9350506020610d1d86828701610c73565b9250506040610d2e86828701610c7f565b9150509250925092565b60008060408385031215610d4b57600080fd5b6000610d578585610c73565b9250506020610ce185828601610c7f565b600060208284031215610d7a57600080fd5b6000610ca98484610c7f565b610d8f81610e5c565b82525050565b610d8f81610e67565b6000610da982610e58565b808452610dbd816020860160208601610e7e565b610dc681610eaa565b9093016020019392505050565b80516040830190610de48482610d86565b506020820151610df76020850182610dfd565b50505050565b610d8f816103a3565b610d8f81610e78565b602081016104238284610d95565b602080825281016108ec8184610d9e565b604081016104238284610dd3565b602081016104238284610dfd565b602081016104238284610e06565b5190565b600061042382610e6c565b151590565b600160a060020a031690565b60ff1690565b60005b83811015610e99578181015183820152602001610e81565b83811115610df75750506000910152565b601f01601f19169056fea265627a7a7230582081b1d392e31274428b868a5068f144163276393de3a1e1439164c73fa68d24c66c6578706572696d656e74616cf50037",
  "sourceMap": "766:1090:7:-;;;1185:159;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;405:163:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:12;;405:163;;;1286:2:7;;493:12:14;;:5;;405:163;493:12;:::i;:::-;-1:-1:-1;515:16:14;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;541:9:14;:20;;-1:-1:-1;;541:20:14;;;;;;;;;;;;-1:-1:-1;275:22:10;;-1:-1:-1;286:10:10;275;;;;:22;:::i;:::-;1321:5:7;:18;;-1:-1:-1;;;;;;1321:18:7;1329:10;1321:18;;;766:1090;;685:119:10;741:21;:8;754:7;741:12;;;;;;:21;:::i;:::-;777:20;;-1:-1:-1;;;;;777:20:10;;;;;;;;685:119;:::o;259:181:9:-;-1:-1:-1;;;;;335:21:9;;;;327:30;;;;;;376:18;380:4;386:7;376:3;;;;:18;:::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:9;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:9;429:4;406:27;;;259:181::o;786:162::-;858:4;-1:-1:-1;;;;;882:21:9;;;;874:30;;;;;;-1:-1:-1;;;;;;921:20:9;:11;:20;;;;;;;;;;;;;;;786:162::o;766:1090:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;766:1090:7;;;-1:-1:-1;766:1090:7;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "766:1090:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;766:1090:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;628:81:14;;;:::i;:::-;;;;;;;;;;;;;;;;2735:238:12;;;;;;;;;:::i;:::-;;;;;;;;936:89;;;:::i;:::-;;;;;;;;3436:294;;;;;;;;;:::i;930:81:14:-;;;:::i;:::-;;;;;;;;4233:317:12;;;;;;;;;:::i;443:128:15:-;;;;;;;;;:::i;1764:89:7:-;;;:::i;:::-;;295:77:13;;;;;;;;;:::i;1626:134:7:-;;;;;;;;;:::i;:::-;;;;;;;;1234:104:12;;;;;;;;;:::i;624:93:13:-;;;;;;;;;:::i;986:31:7:-;;;:::i;1021:27::-;;;:::i;771:85:14:-;;;:::i;508:90:10:-;;;;;;;;;:::i;604:75::-;;;:::i;1348:274:7:-;;;:::i;5058:327:12:-;;;;;;;;;:::i;1962:137::-;;;;;;;;;:::i;395:107:10:-;;;;;;;;;:::i;1669:129:12:-;;;;;;;;;:::i;628:81:14:-;697:5;690:12;;;;;;;;-1:-1:-1;;690:12:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;665:13;;690:12;;697:5;;690:12;;697:5;690:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;628:81;;:::o;2735:238:12:-;2800:4;-1:-1:-1;;;;;2824:21:12;;;;2816:30;;;;;;2866:10;2857:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;2857:29:12;;;;;;;;;;;:37;;;2909:36;;2857:29;;2866:10;2909:36;;;;2889:5;;2909:36;;;;;;;;;;-1:-1:-1;2962:4:12;2735:238;;;;;:::o;936:89::-;1006:12;;936:89;:::o;3436:294::-;-1:-1:-1;;;;;3560:14:12;;3515:4;3560:14;;;:8;:14;;;;;;;;3575:10;3560:26;;;;;;;;:37;;3591:5;3560:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;3531:14:12;;;;;;:8;:14;;;;;;;;3546:10;3531:26;;;;;;;:66;3607:26;3540:4;3623:2;3627:5;3607:9;:26::i;:::-;-1:-1:-1;;;;;3648:54:12;;3675:14;;;;:8;:14;;;;;;;;3663:10;3675:26;;;;;;;;;;3648:54;;3663:10;;3648:54;;;;;3675:26;3648:54;;;;;;;;;;-1:-1:-1;3719:4:12;3436:294;;;;;:::o;930:81:14:-;995:9;;;;930:81;:::o;4233:317:12:-;4313:4;-1:-1:-1;;;;;4337:21:12;;;;4329:30;;;;;;4411:10;4402:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4402:29:12;;;;;;;;;;:45;;4436:10;4402:45;:33;:45;:::i;:::-;4379:10;4370:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4370:29:12;;;;;;;;;;;:77;;;4462:60;;4370:29;;4462:60;;;;4370:77;4462:60;;443:128:15;511:4;350:20:10;359:10;350:8;:20::i;:::-;342:29;;;;;;;;527:16:15;533:2;537:5;527;:16::i;:::-;-1:-1:-1;560:4:15;443:128;;;;:::o;1764:89:7:-;1817:5;;-1:-1:-1;;;;;1817:5:7;1803:10;:19;1795:28;;;;;;1842:5;;-1:-1:-1;;;;;1842:5:7;1829:19;295:77:13;341:24;347:10;359:5;341;:24::i;:::-;295:77;:::o;1626:134:7:-;1700:16;;:::i;:::-;-1:-1:-1;;;;;;1733:22:7;;;;;;;:10;:22;;;;;;;;;1726:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;1626:134::o;1234:104:12:-;-1:-1:-1;;;;;1315:16:12;1289:7;1315:16;;;;;;;;;;;;1234:104::o;624:93:13:-;688:22;698:4;704:5;688:9;:22::i;:::-;624:93;;:::o;986:31:7:-;;;;:::o;1021:27::-;;;;:::o;771:85:14:-;842:7;835:14;;;;;;;;-1:-1:-1;;835:14:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;810:13;;835:14;;842:7;;835:14;;842:7;835:14;;;;;;;;;;;;;;;;;;;;;;;;508:90:10;350:20;359:10;350:8;:20::i;:::-;342:29;;;;;;;;572:19;583:7;572:10;:19::i;604:75::-;647:25;661:10;647:13;:25::i;:::-;604:75::o;1348:274:7:-;1388:4;1410:10;:24;;1402:33;;;;;;1460:10;1449:22;;;;:10;:22;;;;;:40;;;1492:12;-1:-1:-1;1441:64:7;;;;;;1522:10;1511:22;;;;:10;:22;;;;;1569:2;1554:12;:17;1511:40;;;;:60;1577:40;;1595:21;1577:5;:40::i;5058:327:12:-;5143:4;-1:-1:-1;;;;;5167:21:12;;;;5159:30;;;;;;5241:10;5232:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5232:29:12;;;;;;;;;;:50;;5266:15;5232:50;:33;:50;:::i;1962:137::-;2023:4;2039:32;2049:10;2061:2;2065:5;2039:9;:32::i;395:107:10:-;451:4;474:21;:8;487:7;474:21;:12;:21;:::i;1669:129:12:-;-1:-1:-1;;;;;1767:15:12;;;1741:7;1767:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;1669:129::o;1205:145:11:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:11;;;1205:145::o;5599:256:12:-;-1:-1:-1;;;;;5686:16:12;;;;5678:25;;;;;;-1:-1:-1;;;;;5732:15:12;;:9;:15;;;;;;;;;;;:26;;5752:5;5732:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;5714:15:12;;;:9;:15;;;;;;;;;;;:44;;;;5784:13;;;;;;;:24;;5802:5;5784:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;5768:13:12;;;:9;:13;;;;;;;;;;;;:40;;;;5823:25;;;;;;;;;;5842:5;;5823:25;;;;;;;;;;5599:256;;;:::o;1431:145:11:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;;1568:1;1431:145;-1:-1:-1;;;1431:145:11:o;6198:263:12:-;-1:-1:-1;;;;;6272:21:12;;;;6264:30;;;;;;6320:12;;:23;;6337:5;6320:23;:16;:23;:::i;:::-;6305:12;:38;-1:-1:-1;;;;;6374:18:12;;:9;:18;;;;;;;;;;;:29;;6397:5;6374:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6353:18:12;;:9;:18;;;;;;;;;;;:50;;;;6418:36;;6353:18;;:9;6418:36;;;;6448:5;;6418:36;;;;;;;;;;6198:263;;:::o;6687:::-;-1:-1:-1;;;;;6761:21:12;;;;6753:30;;;;;;6809:12;;:23;;6826:5;6809:23;:16;:23;:::i;:::-;6794:12;:38;-1:-1:-1;;;;;6863:18:12;;:9;:18;;;;;;;;;;;:29;;6886:5;6863:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6842:18:12;;:9;:18;;;;;;;;;;;:50;;;;6907:36;;;;;;6937:5;;6907:36;;7339:255;-1:-1:-1;;;;;7441:17:12;;;;;;:8;:17;;;;;;;;7459:10;7441:29;;;;;;;;:40;;7475:5;7441:40;:33;:40;:::i;:::-;-1:-1:-1;;;;;7409:17:12;;;;;;:8;:17;;;;;;;;7427:10;7409:29;;;;;;;:72;7491:21;7418:7;7506:5;7491;:21::i;:::-;-1:-1:-1;;;;;7527:60:12;;7557:17;;;;:8;:17;;;;;;;;7545:10;7557:29;;;;;;;;;;7527:60;;7545:10;;7527:60;;;;;7557:29;7527:60;;685:119:10;741:21;:8;754:7;741:21;:12;:21;:::i;:::-;777:20;;-1:-1:-1;;;;;777:20:10;;;;;;;;685:119;:::o;810:127::-;869:24;:8;885:7;869:24;:15;:24;:::i;:::-;908:22;;-1:-1:-1;;;;;908:22:10;;;;;;;;810:127;:::o;786:162:9:-;858:4;-1:-1:-1;;;;;882:21:9;;;;874:30;;;;;;-1:-1:-1;;;;;;921:20:9;:11;:20;;;;;;;;;;;;;;;786:162::o;259:181::-;-1:-1:-1;;;;;335:21:9;;;;327:30;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:9;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:9;429:4;406:27;;;259:181::o;514:184::-;-1:-1:-1;;;;;593:21:9;;;;585:30;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;;;-1:-1:-1;;;;;663:20:9;686:5;663:20;;;;;;;;;;;:28;;-1:-1:-1;;663:28:9;;;514:184::o;766:1090:7:-;;;;;;;;;;-1:-1:-1;766:1090:7;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:118;;197:46;235:6;222:20;197:46;;255:241;;359:2;347:9;338:7;334:23;330:32;327:2;;;375:1;372;365:12;327:2;410:1;427:53;472:7;452:9;427:53;;;417:63;321:175;-1:-1;;;;321:175;503:366;;;624:2;612:9;603:7;599:23;595:32;592:2;;;640:1;637;630:12;592:2;675:1;692:53;737:7;717:9;692:53;;;682:63;;654:97;782:2;800:53;845:7;836:6;825:9;821:22;800:53;;;790:63;;761:98;586:283;;;;;;876:491;;;;1014:2;1002:9;993:7;989:23;985:32;982:2;;;1030:1;1027;1020:12;982:2;1065:1;1082:53;1127:7;1107:9;1082:53;;;1072:63;;1044:97;1172:2;1190:53;1235:7;1226:6;1215:9;1211:22;1190:53;;;1180:63;;1151:98;1280:2;1298:53;1343:7;1334:6;1323:9;1319:22;1298:53;;;1288:63;;1259:98;976:391;;;;;;1374:366;;;1495:2;1483:9;1474:7;1470:23;1466:32;1463:2;;;1511:1;1508;1501:12;1463:2;1546:1;1563:53;1608:7;1588:9;1563:53;;;1553:63;;1525:97;1653:2;1671:53;1716:7;1707:6;1696:9;1692:22;1671:53;;1747:241;;1851:2;1839:9;1830:7;1826:23;1822:32;1819:2;;;1867:1;1864;1857:12;1819:2;1902:1;1919:53;1964:7;1944:9;1919:53;;1995:110;2068:31;2093:5;2068:31;;;2063:3;2056:44;2050:55;;;2112:101;2179:28;2201:5;2179:28;;2220:300;;2322:39;2355:5;2322:39;;;2378:6;2373:3;2366:19;2390:63;2446:6;2439:4;2434:3;2430:14;2423:4;2416:5;2412:16;2390:63;;;2485:29;2507:6;2485:29;;;2465:50;;;2478:4;2465:50;;2302:218;-1:-1;;;2302:218;2606:513;2816:22;;2743:4;2734:14;;;2850:61;2738:3;2816:22;2850:61;;;2763:160;3012:4;3005:5;3001:16;2995:23;3030:62;3086:4;3081:3;3077:14;3064:11;3030:62;;;2933:171;2716:403;;;;3126:110;3199:31;3224:5;3199:31;;3243:104;3312:29;3335:5;3312:29;;3354:181;3456:2;3441:18;;3470:55;3445:9;3498:6;3470:55;;3542:281;3670:2;3684:47;;;3655:18;;3745:68;3655:18;3799:6;3745:68;;3830:301;3992:2;3977:18;;4006:115;3981:9;4094:6;4006:115;;4138:193;4246:2;4231:18;;4260:61;4235:9;4294:6;4260:61;;4338:185;4442:2;4427:18;;4456:57;4431:9;4486:6;4456:57;;4530:92;4605:12;;4589:33;4629:105;;4698:31;4723:5;4698:31;;4741:92;4814:13;4807:21;;4790:43;4840:128;-1:-1;;;;;4909:54;;4892:76;5061:88;5139:4;5128:16;;5111:38;5355:268;5420:1;5427:101;5441:6;5438:1;5435:13;5427:101;;;5508:11;;;5502:18;5489:11;;;5482:39;5463:2;5456:10;5427:101;;;5543:6;5540:1;5537:13;5534:2;;;-1:-1;;5608:1;5590:16;;5583:27;5404:219;5631:97;5719:2;5699:14;-1:-1;;5695:28;;5679:49",
  "source": "pragma solidity >=0.4.24 <0.6.0;\npragma experimental ABIEncoderV2;\n\n//import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\n//import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\";\n//import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\";\n//import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\";\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\";\n\ncontract StableTokenFaucet is ERC20, ERC20Detailed, ERC20Mintable, ERC20Burnable {\n    //string public name = \"Stable\";\n    //string public symbol = \"STBLE\";\n    //uint8 public decimals = 18;\n\n  address payable owner;\n  uint256 public previousGiveaway;\n  uint256 public lastGiveaway;\n\n  struct Recipient {\n    address receiver;\n    uint256 nextGiveawayBlock;\n  }\n\n  mapping(address => Recipient) private recipients;\n\n  constructor()\n    ERC20Burnable()\n    ERC20Mintable()\n    ERC20Detailed(\"StableTokenFaucet\",\"STFCET\",18)\n    ERC20()\n    public\n  {\n    owner = msg.sender;\n  }\n\n  function drip()\n    public\n    returns (bool)\n  {\n    require(msg.sender != address(0));\n    require(recipients[msg.sender].nextGiveawayBlock < block.number);\n    recipients[msg.sender].nextGiveawayBlock = block.number + 20;\n    _mint(msg.sender, 100000000000000000000);\n  }\n\n  function getRecipient(address _recipient)\n    public\n    view\n    returns(Recipient memory)\n  {\n    return recipients[_recipient];\n  }\n\n  function kill() public\n  {\n    require(msg.sender == owner);\n    selfdestruct(owner);\n  }\n\n}\n",
  "sourcePath": "/home/vagrant/DAPPS/smartpiggiesGithub/smartpiggies/contracts/StableTokenFaucet.sol",
  "ast": {
    "absolutePath": "/home/vagrant/DAPPS/smartpiggiesGithub/smartpiggies/contracts/StableTokenFaucet.sol",
    "exportedSymbols": {
      "StableTokenFaucet": [
        3238
      ]
    },
    "id": 3239,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3119,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".24",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:7"
      },
      {
        "id": 3120,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:33:7"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 3121,
        "nodeType": "ImportDirective",
        "scope": 3239,
        "sourceUnit": 4048,
        "src": "485:63:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "id": 3122,
        "nodeType": "ImportDirective",
        "scope": 3239,
        "sourceUnit": 4137,
        "src": "549:71:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 3123,
        "nodeType": "ImportDirective",
        "scope": 3239,
        "sourceUnit": 4079,
        "src": "621:71:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "id": 3124,
        "nodeType": "ImportDirective",
        "scope": 3239,
        "sourceUnit": 4165,
        "src": "693:71:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3125,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4047,
              "src": "796:5:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$4047",
                "typeString": "contract ERC20"
              }
            },
            "id": 3126,
            "nodeType": "InheritanceSpecifier",
            "src": "796:5:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3127,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4136,
              "src": "803:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$4136",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 3128,
            "nodeType": "InheritanceSpecifier",
            "src": "803:13:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3129,
              "name": "ERC20Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4164,
              "src": "818:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Mintable_$4164",
                "typeString": "contract ERC20Mintable"
              }
            },
            "id": 3130,
            "nodeType": "InheritanceSpecifier",
            "src": "818:13:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3131,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4078,
              "src": "833:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$4078",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 3132,
            "nodeType": "InheritanceSpecifier",
            "src": "833:13:7"
          }
        ],
        "contractDependencies": [
          3487,
          4047,
          4078,
          4136,
          4164,
          4233
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 3238,
        "linearizedBaseContracts": [
          3238,
          4078,
          4164,
          3487,
          4136,
          4047,
          4233
        ],
        "name": "StableTokenFaucet",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 3134,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 3238,
            "src": "961:21:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 3133,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "961:15:7",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 3136,
            "name": "previousGiveaway",
            "nodeType": "VariableDeclaration",
            "scope": 3238,
            "src": "986:31:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 3135,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "986:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3138,
            "name": "lastGiveaway",
            "nodeType": "VariableDeclaration",
            "scope": 3238,
            "src": "1021:27:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 3137,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1021:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "canonicalName": "StableTokenFaucet.Recipient",
            "id": 3143,
            "members": [
              {
                "constant": false,
                "id": 3140,
                "name": "receiver",
                "nodeType": "VariableDeclaration",
                "scope": 3143,
                "src": "1076:16:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 3139,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1076:7:7",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3142,
                "name": "nextGiveawayBlock",
                "nodeType": "VariableDeclaration",
                "scope": 3143,
                "src": "1098:25:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 3141,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1098:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Recipient",
            "nodeType": "StructDefinition",
            "scope": 3238,
            "src": "1053:75:7",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3147,
            "name": "recipients",
            "nodeType": "VariableDeclaration",
            "scope": 3238,
            "src": "1132:48:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
              "typeString": "mapping(address => struct StableTokenFaucet.Recipient)"
            },
            "typeName": {
              "id": 3146,
              "keyType": {
                "id": 3144,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1140:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1132:29:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
                "typeString": "mapping(address => struct StableTokenFaucet.Recipient)"
              },
              "valueType": {
                "contractScope": null,
                "id": 3145,
                "name": "Recipient",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 3143,
                "src": "1151:9:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Recipient_$3143_storage_ptr",
                  "typeString": "struct StableTokenFaucet.Recipient"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 3166,
              "nodeType": "Block",
              "src": "1315:29:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3161,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3134,
                      "src": "1321:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 3162,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4248,
                        "src": "1329:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3163,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1329:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1321:18:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 3165,
                  "nodeType": "ExpressionStatement",
                  "src": "1321:18:7"
                }
              ]
            },
            "documentation": null,
            "id": 3167,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [],
                "id": 3150,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3149,
                  "name": "ERC20Burnable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4078,
                  "src": "1203:13:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Burnable_$4078_$",
                    "typeString": "type(contract ERC20Burnable)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1203:15:7"
              },
              {
                "arguments": [],
                "id": 3152,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3151,
                  "name": "ERC20Mintable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4164,
                  "src": "1223:13:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Mintable_$4164_$",
                    "typeString": "type(contract ERC20Mintable)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1223:15:7"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "537461626c65546f6b656e466175636574",
                    "id": 3154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1257:19:7",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_2d91f4a84ec3a5b285970de159488cd2423a2e2f565c0972d678ca5b5ea10761",
                      "typeString": "literal_string \"StableTokenFaucet\""
                    },
                    "value": "StableTokenFaucet"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "535446434554",
                    "id": 3155,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1277:8:7",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_356734823d87299b3e030c2dff64fa87d8dc715e936ca1302411e6a6267e9310",
                      "typeString": "literal_string \"STFCET\""
                    },
                    "value": "STFCET"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "3138",
                    "id": 3156,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1286:2:7",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  }
                ],
                "id": 3157,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3153,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4136,
                  "src": "1243:13:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$4136_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1243:46:7"
              },
              {
                "arguments": [],
                "id": 3159,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3158,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4047,
                  "src": "1294:5:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20_$4047_$",
                    "typeString": "type(contract ERC20)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1294:7:7"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1196:2:7"
            },
            "returnParameters": {
              "id": 3160,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1315:0:7"
            },
            "scope": 3238,
            "src": "1185:159:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3209,
              "nodeType": "Block",
              "src": "1396:226:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "id": 3178,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 3173,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4248,
                            "src": "1410:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1410:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 3176,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1432:1:7",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 3175,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1424:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 3177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1424:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "1410:24:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3172,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4251,
                        4252
                      ],
                      "referencedDeclaration": 4251,
                      "src": "1402:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1402:33:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3180,
                  "nodeType": "ExpressionStatement",
                  "src": "1402:33:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3189,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 3182,
                              "name": "recipients",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3147,
                              "src": "1449:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
                                "typeString": "mapping(address => struct StableTokenFaucet.Recipient storage ref)"
                              }
                            },
                            "id": 3185,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3183,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4248,
                                "src": "1460:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3184,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1460:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1449:22:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Recipient_$3143_storage",
                              "typeString": "struct StableTokenFaucet.Recipient storage ref"
                            }
                          },
                          "id": 3186,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "nextGiveawayBlock",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3142,
                          "src": "1449:40:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 3187,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4238,
                            "src": "1492:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 3188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1492:12:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1449:55:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3181,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4251,
                        4252
                      ],
                      "referencedDeclaration": 4251,
                      "src": "1441:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3190,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1441:64:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3191,
                  "nodeType": "ExpressionStatement",
                  "src": "1441:64:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 3192,
                          "name": "recipients",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3147,
                          "src": "1511:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
                            "typeString": "mapping(address => struct StableTokenFaucet.Recipient storage ref)"
                          }
                        },
                        "id": 3195,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 3193,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4248,
                            "src": "1522:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1522:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1511:22:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Recipient_$3143_storage",
                          "typeString": "struct StableTokenFaucet.Recipient storage ref"
                        }
                      },
                      "id": 3196,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "nextGiveawayBlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3142,
                      "src": "1511:40:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 3200,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 3197,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4238,
                          "src": "1554:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 3198,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "number",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1554:12:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "argumentTypes": null,
                        "hexValue": "3230",
                        "id": 3199,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1569:2:7",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        },
                        "value": "20"
                      },
                      "src": "1554:17:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1511:60:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 3202,
                  "nodeType": "ExpressionStatement",
                  "src": "1511:60:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 3204,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4248,
                          "src": "1583:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 3205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1583:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "313030303030303030303030303030303030303030",
                        "id": 3206,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1595:21:7",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000000000000000000_by_1",
                          "typeString": "int_const 100000000000000000000"
                        },
                        "value": "100000000000000000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_rational_100000000000000000000_by_1",
                          "typeString": "int_const 100000000000000000000"
                        }
                      ],
                      "id": 3203,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3962,
                      "src": "1577:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3207,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1577:40:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3208,
                  "nodeType": "ExpressionStatement",
                  "src": "1577:40:7"
                }
              ]
            },
            "documentation": null,
            "id": 3210,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "drip",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3168,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1361:2:7"
            },
            "returnParameters": {
              "id": 3171,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3170,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3210,
                  "src": "1388:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3169,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1388:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1387:6:7"
            },
            "scope": 3238,
            "src": "1348:274:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3221,
              "nodeType": "Block",
              "src": "1720:40:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 3217,
                      "name": "recipients",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3147,
                      "src": "1733:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
                        "typeString": "mapping(address => struct StableTokenFaucet.Recipient storage ref)"
                      }
                    },
                    "id": 3219,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 3218,
                      "name": "_recipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3212,
                      "src": "1744:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1733:22:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Recipient_$3143_storage",
                      "typeString": "struct StableTokenFaucet.Recipient storage ref"
                    }
                  },
                  "functionReturnParameters": 3216,
                  "id": 3220,
                  "nodeType": "Return",
                  "src": "1726:29:7"
                }
              ]
            },
            "documentation": null,
            "id": 3222,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRecipient",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3213,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3212,
                  "name": "_recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 3222,
                  "src": "1648:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3211,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1648:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1647:20:7"
            },
            "returnParameters": {
              "id": 3216,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3215,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3222,
                  "src": "1700:16:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Recipient_$3143_memory_ptr",
                    "typeString": "struct StableTokenFaucet.Recipient"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 3214,
                    "name": "Recipient",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3143,
                    "src": "1700:9:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Recipient_$3143_storage_ptr",
                      "typeString": "struct StableTokenFaucet.Recipient"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1699:18:7"
            },
            "scope": 3238,
            "src": "1626:134:7",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3236,
              "nodeType": "Block",
              "src": "1789:64:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "id": 3229,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 3226,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4248,
                            "src": "1803:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3227,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1803:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 3228,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3134,
                          "src": "1817:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "1803:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3225,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4251,
                        4252
                      ],
                      "referencedDeclaration": 4251,
                      "src": "1795:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1795:28:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3231,
                  "nodeType": "ExpressionStatement",
                  "src": "1795:28:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3233,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3134,
                        "src": "1842:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 3232,
                      "name": "selfdestruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4256,
                      "src": "1829:12:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable)"
                      }
                    },
                    "id": 3234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1829:19:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3235,
                  "nodeType": "ExpressionStatement",
                  "src": "1829:19:7"
                }
              ]
            },
            "documentation": null,
            "id": 3237,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "kill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1777:2:7"
            },
            "returnParameters": {
              "id": 3224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1789:0:7"
            },
            "scope": 3238,
            "src": "1764:89:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3239,
        "src": "766:1090:7"
      }
    ],
    "src": "0:1857:7"
  },
  "legacyAST": {
    "absolutePath": "/home/vagrant/DAPPS/smartpiggiesGithub/smartpiggies/contracts/StableTokenFaucet.sol",
    "exportedSymbols": {
      "StableTokenFaucet": [
        3238
      ]
    },
    "id": 3239,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3119,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".24",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:7"
      },
      {
        "id": 3120,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:33:7"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 3121,
        "nodeType": "ImportDirective",
        "scope": 3239,
        "sourceUnit": 4048,
        "src": "485:63:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "id": 3122,
        "nodeType": "ImportDirective",
        "scope": 3239,
        "sourceUnit": 4137,
        "src": "549:71:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 3123,
        "nodeType": "ImportDirective",
        "scope": 3239,
        "sourceUnit": 4079,
        "src": "621:71:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "id": 3124,
        "nodeType": "ImportDirective",
        "scope": 3239,
        "sourceUnit": 4165,
        "src": "693:71:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3125,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4047,
              "src": "796:5:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$4047",
                "typeString": "contract ERC20"
              }
            },
            "id": 3126,
            "nodeType": "InheritanceSpecifier",
            "src": "796:5:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3127,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4136,
              "src": "803:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$4136",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 3128,
            "nodeType": "InheritanceSpecifier",
            "src": "803:13:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3129,
              "name": "ERC20Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4164,
              "src": "818:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Mintable_$4164",
                "typeString": "contract ERC20Mintable"
              }
            },
            "id": 3130,
            "nodeType": "InheritanceSpecifier",
            "src": "818:13:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3131,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4078,
              "src": "833:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$4078",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 3132,
            "nodeType": "InheritanceSpecifier",
            "src": "833:13:7"
          }
        ],
        "contractDependencies": [
          3487,
          4047,
          4078,
          4136,
          4164,
          4233
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 3238,
        "linearizedBaseContracts": [
          3238,
          4078,
          4164,
          3487,
          4136,
          4047,
          4233
        ],
        "name": "StableTokenFaucet",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 3134,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 3238,
            "src": "961:21:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 3133,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "961:15:7",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 3136,
            "name": "previousGiveaway",
            "nodeType": "VariableDeclaration",
            "scope": 3238,
            "src": "986:31:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 3135,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "986:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3138,
            "name": "lastGiveaway",
            "nodeType": "VariableDeclaration",
            "scope": 3238,
            "src": "1021:27:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 3137,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1021:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "canonicalName": "StableTokenFaucet.Recipient",
            "id": 3143,
            "members": [
              {
                "constant": false,
                "id": 3140,
                "name": "receiver",
                "nodeType": "VariableDeclaration",
                "scope": 3143,
                "src": "1076:16:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 3139,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1076:7:7",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3142,
                "name": "nextGiveawayBlock",
                "nodeType": "VariableDeclaration",
                "scope": 3143,
                "src": "1098:25:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 3141,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1098:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Recipient",
            "nodeType": "StructDefinition",
            "scope": 3238,
            "src": "1053:75:7",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3147,
            "name": "recipients",
            "nodeType": "VariableDeclaration",
            "scope": 3238,
            "src": "1132:48:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
              "typeString": "mapping(address => struct StableTokenFaucet.Recipient)"
            },
            "typeName": {
              "id": 3146,
              "keyType": {
                "id": 3144,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1140:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1132:29:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
                "typeString": "mapping(address => struct StableTokenFaucet.Recipient)"
              },
              "valueType": {
                "contractScope": null,
                "id": 3145,
                "name": "Recipient",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 3143,
                "src": "1151:9:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Recipient_$3143_storage_ptr",
                  "typeString": "struct StableTokenFaucet.Recipient"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 3166,
              "nodeType": "Block",
              "src": "1315:29:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3161,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3134,
                      "src": "1321:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 3162,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4248,
                        "src": "1329:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3163,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1329:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1321:18:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 3165,
                  "nodeType": "ExpressionStatement",
                  "src": "1321:18:7"
                }
              ]
            },
            "documentation": null,
            "id": 3167,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [],
                "id": 3150,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3149,
                  "name": "ERC20Burnable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4078,
                  "src": "1203:13:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Burnable_$4078_$",
                    "typeString": "type(contract ERC20Burnable)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1203:15:7"
              },
              {
                "arguments": [],
                "id": 3152,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3151,
                  "name": "ERC20Mintable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4164,
                  "src": "1223:13:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Mintable_$4164_$",
                    "typeString": "type(contract ERC20Mintable)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1223:15:7"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "537461626c65546f6b656e466175636574",
                    "id": 3154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1257:19:7",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_2d91f4a84ec3a5b285970de159488cd2423a2e2f565c0972d678ca5b5ea10761",
                      "typeString": "literal_string \"StableTokenFaucet\""
                    },
                    "value": "StableTokenFaucet"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "535446434554",
                    "id": 3155,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1277:8:7",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_356734823d87299b3e030c2dff64fa87d8dc715e936ca1302411e6a6267e9310",
                      "typeString": "literal_string \"STFCET\""
                    },
                    "value": "STFCET"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "3138",
                    "id": 3156,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1286:2:7",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  }
                ],
                "id": 3157,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3153,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4136,
                  "src": "1243:13:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$4136_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1243:46:7"
              },
              {
                "arguments": [],
                "id": 3159,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3158,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4047,
                  "src": "1294:5:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20_$4047_$",
                    "typeString": "type(contract ERC20)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1294:7:7"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1196:2:7"
            },
            "returnParameters": {
              "id": 3160,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1315:0:7"
            },
            "scope": 3238,
            "src": "1185:159:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3209,
              "nodeType": "Block",
              "src": "1396:226:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "id": 3178,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 3173,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4248,
                            "src": "1410:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1410:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 3176,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1432:1:7",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 3175,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1424:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 3177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1424:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "1410:24:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3172,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4251,
                        4252
                      ],
                      "referencedDeclaration": 4251,
                      "src": "1402:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1402:33:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3180,
                  "nodeType": "ExpressionStatement",
                  "src": "1402:33:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3189,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 3182,
                              "name": "recipients",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3147,
                              "src": "1449:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
                                "typeString": "mapping(address => struct StableTokenFaucet.Recipient storage ref)"
                              }
                            },
                            "id": 3185,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3183,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4248,
                                "src": "1460:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3184,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1460:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1449:22:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Recipient_$3143_storage",
                              "typeString": "struct StableTokenFaucet.Recipient storage ref"
                            }
                          },
                          "id": 3186,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "nextGiveawayBlock",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3142,
                          "src": "1449:40:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 3187,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4238,
                            "src": "1492:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 3188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1492:12:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1449:55:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3181,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4251,
                        4252
                      ],
                      "referencedDeclaration": 4251,
                      "src": "1441:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3190,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1441:64:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3191,
                  "nodeType": "ExpressionStatement",
                  "src": "1441:64:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 3192,
                          "name": "recipients",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3147,
                          "src": "1511:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
                            "typeString": "mapping(address => struct StableTokenFaucet.Recipient storage ref)"
                          }
                        },
                        "id": 3195,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 3193,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4248,
                            "src": "1522:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1522:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1511:22:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Recipient_$3143_storage",
                          "typeString": "struct StableTokenFaucet.Recipient storage ref"
                        }
                      },
                      "id": 3196,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "nextGiveawayBlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3142,
                      "src": "1511:40:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 3200,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 3197,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4238,
                          "src": "1554:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 3198,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "number",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1554:12:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "argumentTypes": null,
                        "hexValue": "3230",
                        "id": 3199,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1569:2:7",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        },
                        "value": "20"
                      },
                      "src": "1554:17:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1511:60:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 3202,
                  "nodeType": "ExpressionStatement",
                  "src": "1511:60:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 3204,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4248,
                          "src": "1583:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 3205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1583:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "313030303030303030303030303030303030303030",
                        "id": 3206,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1595:21:7",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000000000000000000_by_1",
                          "typeString": "int_const 100000000000000000000"
                        },
                        "value": "100000000000000000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_rational_100000000000000000000_by_1",
                          "typeString": "int_const 100000000000000000000"
                        }
                      ],
                      "id": 3203,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3962,
                      "src": "1577:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3207,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1577:40:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3208,
                  "nodeType": "ExpressionStatement",
                  "src": "1577:40:7"
                }
              ]
            },
            "documentation": null,
            "id": 3210,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "drip",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3168,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1361:2:7"
            },
            "returnParameters": {
              "id": 3171,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3170,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3210,
                  "src": "1388:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3169,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1388:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1387:6:7"
            },
            "scope": 3238,
            "src": "1348:274:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3221,
              "nodeType": "Block",
              "src": "1720:40:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 3217,
                      "name": "recipients",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3147,
                      "src": "1733:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Recipient_$3143_storage_$",
                        "typeString": "mapping(address => struct StableTokenFaucet.Recipient storage ref)"
                      }
                    },
                    "id": 3219,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 3218,
                      "name": "_recipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3212,
                      "src": "1744:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1733:22:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Recipient_$3143_storage",
                      "typeString": "struct StableTokenFaucet.Recipient storage ref"
                    }
                  },
                  "functionReturnParameters": 3216,
                  "id": 3220,
                  "nodeType": "Return",
                  "src": "1726:29:7"
                }
              ]
            },
            "documentation": null,
            "id": 3222,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRecipient",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3213,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3212,
                  "name": "_recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 3222,
                  "src": "1648:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3211,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1648:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1647:20:7"
            },
            "returnParameters": {
              "id": 3216,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3215,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3222,
                  "src": "1700:16:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Recipient_$3143_memory_ptr",
                    "typeString": "struct StableTokenFaucet.Recipient"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 3214,
                    "name": "Recipient",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3143,
                    "src": "1700:9:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Recipient_$3143_storage_ptr",
                      "typeString": "struct StableTokenFaucet.Recipient"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1699:18:7"
            },
            "scope": 3238,
            "src": "1626:134:7",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3236,
              "nodeType": "Block",
              "src": "1789:64:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "id": 3229,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 3226,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4248,
                            "src": "1803:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3227,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1803:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 3228,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3134,
                          "src": "1817:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "1803:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3225,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4251,
                        4252
                      ],
                      "referencedDeclaration": 4251,
                      "src": "1795:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1795:28:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3231,
                  "nodeType": "ExpressionStatement",
                  "src": "1795:28:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3233,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3134,
                        "src": "1842:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 3232,
                      "name": "selfdestruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4256,
                      "src": "1829:12:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable)"
                      }
                    },
                    "id": 3234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1829:19:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3235,
                  "nodeType": "ExpressionStatement",
                  "src": "1829:19:7"
                }
              ]
            },
            "documentation": null,
            "id": 3237,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "kill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1777:2:7"
            },
            "returnParameters": {
              "id": 3224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1789:0:7"
            },
            "scope": 3238,
            "src": "1764:89:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3239,
        "src": "766:1090:7"
      }
    ],
    "src": "0:1857:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.2+commit.1df8f40c.Emscripten.clang"
  },
  "networks": {
    "3": {
      "events": {},
      "links": {},
      "address": "0x3cd9f616c65ee8a2b628041dbc178fe526117a1f",
      "transactionHash": "0x2e27f6df3c2c66117a4a2c657b98f6b3029b7bc2458a0d025611b5f6d9d122f5"
    },
    "4": {
      "events": {},
      "links": {},
      "address": "0xbc1d371885cf8ebe80c17fd021ab4d1375590b67",
      "transactionHash": "0xe4b8db524bf2d883426c28cb18433beeba079ea28dbf165430cd9f69bbdb3398"
    }
  },
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-05-13T23:10:40.366Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "burn(uint256)": {
        "details": "Burns a specific amount of tokens.",
        "params": {
          "value": "The amount of token to be burned."
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Burns a specific amount of tokens from the target address and decrements allowance",
        "params": {
          "from": "address The address which you want to send tokens from",
          "value": "uint256 The amount of token to be burned"
        }
      },
      "decimals()": {
        "return": "the number of decimals of the token."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "value": "The amount of tokens to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "name()": {
        "return": "the name of the token."
      },
      "symbol()": {
        "return": "the symbol of the token."
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}